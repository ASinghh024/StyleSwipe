'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { useAuth } from '@/contexts/AuthContext'
import { getMatchedUsers } from '@/lib/match-utils'
import { 
  ArrowLeft, 
  Heart, 
  Users, 
  Calendar,
  Loader2,
  MessageCircle
} from 'lucide-react'
import Link from 'next/link'

interface MatchedUser {
  id: string
  user_id: string
  stylist_id: string
  matched_at: string
  user_profile: {
    full_name: string
    role: string
  }
  user_preferences?: {
    gender: string
    clothing_preferences: string[]
    preferred_occasions: string[]
    style_preferences: string
    budget_range: string
  }
}

export default function StylistDashboard() {
  const { user, userProfile } = useAuth()
  const [matchedUsers, setMatchedUsers] = useState<MatchedUser[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [stats, setStats] = useState({
    total: 0
  })

  useEffect(() => {
    if (user && userProfile?.role === 'stylist') {
      fetchMatchedUsers()
    }
  }, [user, userProfile])

  const fetchMatchedUsers = async () => {
    try {
      setLoading(true)
      setError(null)

      console.log('üîç Fetching matched users for stylist:', user?.id)
      console.log('üîç User profile:', userProfile)

      const result = await getMatchedUsers(user?.id || '')
      
      console.log('üîç getMatchedUsers result:', result)
      
      if (result.error) {
        console.error('‚ùå Error from getMatchedUsers:', result.error)
        setError(`Failed to load matches: ${result.error}`)
        return
      }

      console.log('‚úÖ Successfully fetched matched users:', result.users)
      setMatchedUsers(result.users)
      setStats({ total: result.total })

    } catch (error) {
      console.error('‚ùå Error fetching matched users:', error)
      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred'
      setError(`Failed to load matched users: ${errorMessage}`)
    } finally {
      setLoading(false)
    }
  }

  if (!user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 to-pink-50 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-800 mb-4">Please sign in to access dashboard</h1>
          <p className="text-gray-600">You need to be logged in to view your stylist dashboard.</p>
        </div>
      </div>
    )
  }

  if (userProfile?.role !== 'stylist') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 to-pink-50 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-800 mb-4">Access Denied</h1>
          <p className="text-gray-600 mb-6">This dashboard is only available for stylists.</p>
          <Link
            href="/"
            className="bg-primary-500 text-white px-6 py-3 rounded-full font-semibold hover:bg-primary-600 transition-colors"
          >
            Go to Home
          </Link>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-pink-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b border-gray-100">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-4">
              <Link
                href="/"
                className="flex items-center space-x-2 text-gray-600 hover:text-gray-900 transition-colors"
              >
                <ArrowLeft className="w-4 h-4" />
                <span>Back to Home</span>
              </Link>
            </div>
            
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <div className="w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center">
                  <span className="text-sm font-semibold text-primary-600">
                    {userProfile?.full_name?.charAt(0) || 'S'}
                  </span>
                </div>
                <span className="text-sm font-medium text-gray-700">
                  {userProfile?.full_name || user.email}
                </span>
                <span className="text-xs bg-primary-100 text-primary-700 px-2 py-1 rounded-full">
                  Stylist
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-6xl mx-auto px-4 py-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Stylist Dashboard</h1>
          <p className="text-gray-600">Manage your client matches and build relationships</p>
        </motion.div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 }}
            className="bg-white rounded-xl p-6 shadow-sm border border-gray-100"
          >
            <div className="flex items-center space-x-3">
              <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                <Users className="w-6 h-6 text-blue-600" />
              </div>
              <div>
                <p className="text-sm text-gray-600">Total Matches</p>
                <p className="text-2xl font-bold text-gray-900">{stats.total}</p>
              </div>
            </div>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
            className="bg-white rounded-xl p-6 shadow-sm border border-gray-100"
          >
            <div className="flex items-center space-x-3">
              <div className="w-12 h-12 bg-pink-100 rounded-lg flex items-center justify-center">
                <Heart className="w-6 h-6 text-pink-600" />
              </div>
              <div>
                <p className="text-sm text-gray-600">Client Matches</p>
                <p className="text-2xl font-bold text-gray-900">{stats.total}</p>
              </div>
            </div>
          </motion.div>
        </div>

        {/* Error State */}
        {error && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-red-50 border border-red-200 rounded-lg p-4 mb-8"
          >
            <p className="text-red-600">{error}</p>
            <button 
              onClick={fetchMatchedUsers}
              className="mt-2 text-red-700 hover:text-red-900 font-medium"
            >
              Try again
            </button>
          </motion.div>
        )}

        {/* Matched Users List */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5 }}
          className="bg-white rounded-xl shadow-sm border border-gray-100"
        >
          <div className="p-6 border-b border-gray-100">
            <h2 className="text-xl font-semibold text-gray-900">Your Matches</h2>
            <p className="text-gray-600">Users who liked your style and want to work with you</p>
          </div>

          {loading ? (
            <div className="p-8 text-center">
              <Loader2 className="w-8 h-8 animate-spin text-purple-600 mx-auto mb-4" />
              <p className="text-gray-600">Loading matched users...</p>
            </div>
          ) : matchedUsers.length === 0 ? (
            <div className="p-8 text-center">
              <Heart className="w-12 h-12 text-gray-300 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">No users have matched with you yet!</h3>
              <p className="text-gray-600">When users like your style, they'll appear here! Keep building your profile to attract more clients.</p>
            </div>
          ) : (
            <div className="divide-y divide-gray-100">
              {matchedUsers.map((match) => (
                <div key={match.id} className="p-6">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-3 mb-3">
                        <div className="w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center">
                          <span className="text-sm font-semibold text-purple-600">
                            {match.user_profile?.full_name?.charAt(0) || 'U'}
                          </span>
                        </div>
                        <div>
                          <h3 className="font-medium text-gray-900">
                            {match.user_profile?.full_name || 'Anonymous User'}
                          </h3>
                          <div className="flex items-center space-x-2 text-sm text-gray-600">
                            <Calendar className="w-4 h-4" />
                            <span>Matched {new Date(match.matched_at).toLocaleDateString()}</span>
                          </div>
                        </div>
                      </div>

                      {/* User Preferences */}
                      {match.user_preferences && (
                        <div className="bg-gray-50 rounded-lg p-4 mb-4">
                          <h4 className="font-medium text-gray-900 mb-3">Styling Preferences</h4>
                          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                            {match.user_preferences.gender && (
                              <div>
                                <span className="text-gray-600">Gender:</span>
                                <p className="font-medium capitalize">{match.user_preferences.gender}</p>
                              </div>
                            )}
                            {match.user_preferences.clothing_preferences?.length > 0 && (
                              <div>
                                <span className="text-gray-600">Clothing:</span>
                                <p className="font-medium capitalize">{match.user_preferences.clothing_preferences[0]}</p>
                                {match.user_preferences.clothing_preferences.length > 1 && (
                                  <p className="text-xs text-gray-500">+{match.user_preferences.clothing_preferences.length - 1} more</p>
                                )}
                              </div>
                            )}
                            {match.user_preferences.style_preferences && (
                              <div>
                                <span className="text-gray-600">Style:</span>
                                <p className="font-medium capitalize">{match.user_preferences.style_preferences}</p>
                              </div>
                            )}
                            {match.user_preferences.budget_range && (
                              <div>
                                <span className="text-gray-600">Budget:</span>
                                <p className="font-medium">‚Çπ{match.user_preferences.budget_range}</p>
                              </div>
                            )}
                          </div>
                          {match.user_preferences.preferred_occasions?.length > 0 && (
                            <div className="mt-3">
                              <span className="text-sm text-gray-600">Occasions:</span>
                              <div className="flex flex-wrap gap-1 mt-1">
                                {match.user_preferences.preferred_occasions.map((occasion, index) => (
                                  <span key={index} className="text-xs bg-purple-100 text-purple-700 px-2 py-1 rounded-full">
                                    {occasion}
                                  </span>
                                ))}
                              </div>
                            </div>
                          )}
                        </div>
                      )}
                    </div>

                    {/* Contact Button */}
                    <div className="ml-4">
                      <button className="flex items-center space-x-2 bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors">
                        <MessageCircle className="w-4 h-4" />
                        <span>Contact Client</span>
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </motion.div>
      </div>
    </div>
  )
} 